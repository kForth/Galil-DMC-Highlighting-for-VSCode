{
    "fileTypes": [
        "dmc"
    ],
    "name": "dmc",
    "patterns": [
        { "include": "#line-length" },
        { "include": "#comments" },
        { "include": "#string" },
        { "include": "#string-format" },
        { "include": "#routing" },
        { "include": "#numeric-literal" },
        { "include": "#impossible" },
        { "include": "#label-declaration" },
        { "include": "#label-close" },
        { "include": "#reserved-literal" },
        { "include": "#special-variable-reference" },
        { "include": "#invalid-special-variable-reference" },
        { "include": "#assignment-operator" },
        { "include": "#comparison-operator" },
        { "include": "#condition-operator" },
        { "include": "#manipulative-operator" },
        { "include": "#control-statement" },
        { "include": "#functions" },
        { "include": "#value-functions" },
        { "include": "#function-operator" },
        { "include": "#indexer-parameter" },
        { "include": "#variable-reference" }
    ],
    "repository": {
        "line-length": {
            "name": "invalid.illegal",
            "match": "^(.{80})(.+$\n?)"
        },
        "string": {
            "name": "string.double.dmc",
            "begin": "\"",
            "end": "\""
        },
        "string-format": {
            "name": "string.interpolated.dmc",
            "match": "{(((F|Z|$)[0-9]+\\.[0-9]+)|(S[0-9]+)|(N))}"
        },
        "routing": {
            "name": "string.interpolated.dmc",
            "match": "{(P[0-9]+|Ex)}"
        },
        "comments": {
            "patterns":[
                {
                    "name": "comment.line.character.dmc",
                    "begin": "(?:;?)(\\s*)(')",
                    "end": "$\\n?"
                },
                {
                    "name": "comment.line.character.dmc",
                    "begin": "(?:;?)(\\s*)(NO)",
                    "end": "$\\n?"
                },
                {
                    "name": "comment.line.character.dmc",
                    "begin": "(^REM)",
                    "end": "$\\n?"
                }
            ]
        },
        "assignment-operator": {
            "match": "=",
            "name": "keyword.operator.assignment.dmc"
        },
        "comparison-operator": {
            "match": "=|<>|>|<|<=|>=",
            "name": "keyword.operator.comparison.dmc"
        },
        "condition-operator": {
            "match": "&|\\|",
            "name": "keyword.operator.condition.dmc"
        },
        "manipulative-operator": {
            "match": "\\*|/|\\-|\\+|%",
            "name": "keyword.operator.manipulative.dmc"
        },
        "function-operator": {
            "name": "entity.name.function.dmc",
            "match": "@(IN|OUT|ABS|ACOS|AN|ASIN|ATAN|COM|COS|FLOT|FRAC|IN|INT|OUT|REAL|RND|SIN|SQR|TAN)"
        },
        "control-statement": {
            "match": "(^\\s*)(IF|ELSE|ENDIF)(\\b)",
            "name": "keyword.control.dmc"
        },
        "functions": {
            "name": "entity.name.function.dmc",
            "match": "(.*?)((\\b|\\s)(GP|LF|LR|AB|AC|AD|AF|AG|AI|AL|AM|AO|AP|AQ|AR|AS|AT|AU|AV|AZ|BA|BC|BD|BG|BI|BK|BL|BM|BN|BP|BR|BT|BV|BW|BX|BZ|CA|CB|CC|CD|CE|CF|CI|CM|CN|CR|CS|CW|DA|DC|DE|DH|DL|DM|DP|DR|DT|DV|EA|EB|EC|ED|EG|EI|EM|EO|EP|EQ|ER|ES|ET|EW|EY|FA|FE|FI|FL|FV|GA|GD|GM|GR|HM|HS|HV|HX|IA|ID|IH|II|IK|IL|IP|IT|JG|JP|JS|KD|KI|KP|KS|LA|LC|LD|LE|LI|LL|LM|LS|LV|LZ|MB|MC|ME|MF|MG|MO|MR|MT|MU|MW|NB|NF|NZ|OA|OB|OC|OE|OF|OP|OT|OV|P2CD|P2CH|P2NM|P2ST|PA|PF|PL|PR|PT|PV|PW|QD|QH|QQ|QR|QS|QU|QZ|RA|RC|RD|RL|RP|RS|SA|SB|SC|SD|SH|SL|SM|SP|ST|TA|TB|TC|TD|TE|TH|TI|TK|TL|TM|TN|TP|TR|TS|TT|TV|TW|TZ|UI|UL|US|VA|VD|VE|VF|VM|VP|VR|VS|VV|WH|WT|XQ|YA|YB|YC|YR|YS|ZA|ZS))([ ]?[A-HSTXYZW]{0,8})(\\b)",
            "captures": {
                "5": {
                    "name": "variable.parameter.dmc"
                }
            }
        },
        "value-functions": {
            "name": "entity.name.function.dmc",
            "match": "(.*?)((\\b|\\s)([_])(GP|LF|LR|AB|AC|AD|AF|AG|AI|AL|AM|AO|AP|AQ|AR|AS|AT|AU|AV|AZ|BA|BC|BD|BG|BI|BK|BL|BM|BN|BP|BR|BT|BV|BW|BX|BZ|CA|CB|CC|CD|CE|CF|CI|CM|CN|CR|CS|CW|DA|DC|DE|DH|DL|DM|DP|DR|DT|DV|EA|EB|EC|ED|EG|EI|EM|EO|EP|EQ|ER|ES|ET|EW|EY|FA|FE|FI|FL|FV|GA|GD|GM|GR|HM|HS|HV|HX|IA|ID|IH|II|IK|IL|IP|IT|JG|JP|JS|KD|KI|KP|KS|LA|LC|LD|LE|LI|LL|LM|LS|LV|LZ|MB|MC|ME|MF|MG|MO|MR|MT|MU|MW|NB|NF|NO|NZ|OA|OB|OC|OE|OF|OP|OT|OV|P2CD|P2CH|P2NM|P2ST|PA|PF|PL|PR|PT|PV|PW|QD|QH|QQ|QR|QS|QU|QZ|RA|RC|RD|RL|RP|RS|SA|SB|SC|SD|SH|SL|SM|SP|ST|TA|TB|TC|TD|TE|TH|TI|TK|TL|TM|TN|TP|TR|TS|TT|TV|TW|TZ|UI|UL|US|VA|VD|VE|VF|VM|VP|VR|VS|VV|WH|WT|XQ|YA|YB|YC|YR|YS|ZA|ZS))([ ]?[A-HSTXYZW]{0,8})(\\b)",
            "captures": {
                "6": {
                    "name": "variable.parameter.dmc"
                }
            }
        },
        "label-declaration": {
            "name": "meta.declaration.class.dmc",
            "match": "(\\s*?)(#[A-Za-z0-9_]{1,7})([A-Za-z0-9_]*)(\\s*)",
            "captures": {
                "2": {
                    "name": "support.class.dmc"
                },
                "3": {
                    "name": "invalid.illegal.dmc"
                }
            }
        },
        "label-close": {
            "name": "meta.declaration.class.dmc",
            "match": "(\\b)(EN|RI|RE)(\\s*)",
            "captures": {
                "2": {
                    "name": "support.class.dmc"
                },
                "3": {
                    "name": "variable.parameter"
                }
            }
        },
        "variable-reference": {
            "name": "meta.declaration.object.dmc",
            "match": "(\\b)([_a-zA-Z_0-9]{1,8})([_a-zA-Z_0-9]*?)(\\b)",
            "captures": {
                "2": {
                    "name": "variable.other.dmc"
                },
                "3": {
                    "name": "invalid.illegal"
                }
            }
        },
        "special-variable-reference": {
            "name": "meta.declaration.variable.dmc",
            "match": "(\\s*)([\\^~][a-h])(\\b)",
            "captures": {
                "2": {
                    "name": "variable.language.dmc"
                }
            }
        },
        "invalid-special-variable-reference": {
            "name": "meta.declaration.object.dmc",
            "match": "(\\s*)([\\^~]([i-zA-Z]|([a-zA-Z]{2,})))(\\b)",
            "captures": {
                "2": {
                    "name": "invalid.illegal"
                }
            }
        },
        "indexer-parameter": {
            "match": "([a-zA-Z0-9][\\w$]*)(?=\\:)",
            "name": "meta.indexer.parameter.dmc",
            "captures": {
                "1": {
                    "name": "variable.parameter.dmc"
                }
            }
        },
        "numeric-literal": {
            "patterns": [
                
                {
                    "match": "(\\s*)(\\$[0-9a-fA-F]+)(\\b)",
                    "name": "constant.numeric.integer.hexadecimal.dmc"
                },
                {
                    "match": "(\\s*)([-]?[0-9]+(\\.[0-9]+)?)(\\b)",
                    "name": "constant.numeric.float.dmc"
                }
            ]
        },
        "reserved-literal": {
            "match": "\\b(TIME)\\b",
            "name": "variable.language.dmc"
        },
        "impossible": {
			"comment": "This is a special rule that should be used where no match is desired. It is not a good idea to match something like '1{0}' because in some cases that can result in infinite loops in token generation. So the rule instead matches and impossible expression to allow a match to fail and move to the next token.",
			"match": "$.^"
		}
    },
    "scopeName": "source.dmc"
}